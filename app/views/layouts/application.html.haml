!!!
%html{:lang => 'en'}
  %head
    %title
      Battlecon
    %link{:href => "/stylesheets/bootstrap.min.css", :type => "text/css", :rel => "stylesheet"}
    %link{:href => "/stylesheets/bootstrap-responsive.min.css", :type => "text/css", :rel => "stylesheet"}
    %link{:href => "/stylesheets/game.css", :type => "text/css", :rel => "stylesheet"}
    %link#favicon{:rel => "shortcut icon", :type => "image/png", href:"/favicon.gif"}
    %script{src: "https://login.persona.org/include.js", type: 'text/javascript'}
    = stylesheet_link_tag    "application", :media => "all"
    = javascript_include_tag "application"
    = csrf_meta_tags
    %script{src: "/javascripts/bootstrap.min.js", type: 'text/javascript'}
    :javascript
      navigator.id.watch({
        loggedInUser: null,
        onlogin: function(assertion) {
          // A user has logged in! Here you need to:
          // 1. Send the assertion to your backend for verification and to create a session.
          // 2. Update your UI.
          $.ajax({ /* <-- This example uses jQuery, but you can use whatever you'd like */
            type: 'POST',
            url: '/sessions/login', // This is a URL on your website.
            data: {assertion: assertion},
            success: function(res, status, xhr) { window.onLogin(); },
            error: function(xhr, status, err) {
              // alert("Login failure: " + err);
            }
          });
        },
        onlogout: function() {
          // A user has logged out! Here you need to:
          // Tear down the user's session by redirecting the user or making a call to your backend.
          // Also, make sure loggedInUser will get set to null on the next page load.
          // (That's a literal JavaScript null. Not false, 0, or undefined. null.)
          $.ajax({
            type: 'POST',
            url: '/sessions/logout', // This is a URL on your website.
            success: function(res, status, xhr) { window.onLogout(); },
            error: function(xhr, status, err) {
              // alert("Logout failure: " + err);
            }
          });
        }
      });

  %body
    .container
      .navbar
        .navbar-inner
          = link_to "Battlecon", landing_path, class: 'brand'
          %ul.nav.pull-right
            - if current_user
              %li
                = link_to games_path do
                  Games
                  %span.badge.badge-info#input-count{:style => "display: none"}
              :javascript
                var requiredInputCount = function() {
                  $.get('#{required_input_count_path}', function(count) {
                    var $i = $('#input-count')
                    $i.text(count)
                    if (count > 0){
                      $i.show()
                    }else{
                      $i.hide()
                    }
                    setTimeout(requiredInputCount, 5000)
                  })
                }
                $(requiredInputCount)
              %li
                = link_to(current_user.email, current_user, class: '#my-profile')
              %li.logged-in
                %a#personaLogout{href: '#'} Logout
                :javascript
                  var signoutLink = document.getElementById('personaLogout');
                  if (signoutLink) {
                    signoutLink.onclick = function() { navigator.id.logout(); };
                  };
                  window.onLogin = function() {};
                  window.onLogout = function() {
                    window.location.reload();
                  }
            - else
              %li.logged-out
                %a#personaLogin{href: '#'} Login
                :javascript
                  var signinLink = document.getElementById('personaLogin');
                  if (signinLink) {
                    signinLink.onclick = function() { navigator.id.request(); };
                  };
                  window.onLogout = function() {};
                  window.onLogin = function() {
                    window.location.reload();
                  }
      -flash.each do |k,v|
        .alert{class: flash_to_alert[k] || "oops#{k}"}
          = v
      = yield
